generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id
  email       String   @unique
  name        String
  password    String
  birthDate   DateTime
  address     String
  role        Role     @default(user)
  gender      Gender
  phoneNumber String

  ward        String // Kelurahan
  subDistrict String // Kecamatan
  city        String // Kota
  regency     String // Kabupaten
  province    String // Provinsi

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employee Employee?
  votes    Vote[]
}

model Employee {
  id                 Int                 @id @default(autoincrement())
  userId             String              @unique
  divisionId         Int?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  employeeDivision   EmployeeDivision?   @relation(fields: [divisionId], references: [id])
  user               User                @relation(fields: [userId], references: [id])
  employeeAttendance EmployeeAttendance?
}

model EmployeeSchedule {
  id               Int               @id @default(autoincrement())
  divisionId       Int?
  name             String
  description      String
  startAt          DateTime
  endAt            DateTime
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  employeeDivision EmployeeDivision? @relation(fields: [divisionId], references: [id])
}

model EmployeeAttendance {
  employeeId Int      @unique
  inTime     DateTime @default(now())
  outTime    DateTime @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id])
}

model EmployeeDivision {
  id        Int                @id @default(autoincrement())
  name      String             @unique
  employee  Employee[]
  schedules EmployeeSchedule[]
}

model CandidateGroup {
  id        Int         @id @default(autoincrement())
  startAt   DateTime
  endAt     DateTime
  status    Status
  candidate Candidate[]
}

model Candidate {
  id               Int            @id @default(autoincrement())
  candidateGroupId Int
  chiefName        String
  deputyName       String
  chiefImageUrl    String
  deputyImageUrl   String
  vision           String
  mission          String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  status           Status
  votes            Vote[]
  votingResults    VoteResult[]
  candidateGroup   CandidateGroup @relation(fields: [candidateGroupId], references: [id])
}

model Vote {
  id            Int        @id @default(autoincrement())
  userId        String
  candidateId   Int
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  candidate     Candidate  @relation(fields: [candidateId], references: [id])
  user          User       @relation(fields: [userId], references: [id])
  VotingPlace   VotePlace? @relation(fields: [votingPlaceId], references: [id])
  votingPlaceId Int?

  @@unique([userId, candidateId])
}

model VotePlace {
  id          Int    @id @default(autoincrement())
  imageUrl    String
  description String
  address     String

  latitude  Float
  longitude Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  votes     Vote[]
}

model VoteResult {
  candidateId Int       @unique
  total       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  candidate   Candidate @relation(fields: [candidateId], references: [id])
}

enum Role {
  user
  employee
  admin
}

enum Gender {
  male
  female
}

enum Status {
  active
  inactive
}
